apiVersion: shipwright.io/v1beta1
kind: ClusterBuildStrategy
metadata:
  name: ko
spec:
  parameters:
  - default: ""
    description: Value for the GOFLAGS environment variable.
    name: go-flags
  - default: 1.24.3
    description: Version of Go, must match a tag from https://hub.docker.com/_/golang?tab=tags
    name: go-version
  - default: latest
    description: Version of ko, must be either 'latest', or a release name from https://github.com/ko-build/ko/releases
    name: ko-version
  - default: .
    description: The directory inside the context directory containing the main package.
    name: package-directory
  - default: current
    description: 'Target platform to be built. For example: ''linux/arm64''. Multiple
      platforms can be provided separated by comma, for example: ''linux/arm64,linux/amd64''.
      The value ''all'' will build all platforms supported by the base image. The
      value ''current'' will build the platform on which the build runs.'
    name: target-platform
  securityContext:
    runAsGroup: 1000
    runAsUser: 1000
  steps:
  - args:
    - -c
    - |
      set -euo pipefail

      # Determine the ko version
      KO_VERSION="${PARAM_KO_VERSION}"
      if [ "${KO_VERSION}" == "latest" ]; then
        KO_VERSION=$(curl --silent "https://api.github.com/repos/ko-build/ko/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
      fi

      # Create one variable with v-suffix and one without as we need both for the download URL
      if [[ ${KO_VERSION} = v* ]]; then
        KO_VERSION_WITH_V=${KO_VERSION}
        KO_VERSION_WITHOUT_V=${KO_VERSION:1}
      else
        KO_VERSION_WITH_V=v${KO_VERSION}
        KO_VERSION_WITHOUT_V=${KO_VERSION}
      fi

      # Download ko to the temp directory
      curl -f -s -L "https://github.com/ko-build/ko/releases/download/${KO_VERSION_WITH_V}/ko_${KO_VERSION_WITHOUT_V}_$(uname)_$(uname -m | sed 's/aarch64/arm64/').tar.gz" | tar xzf - -C /tmp ko

      # Determine the platform
      PLATFORM="${PARAM_TARGET_PLATFORM}"
      if [ "${PLATFORM}" == "current" ]; then
        PLATFORM="$(uname | tr '[:upper:]' '[:lower:]')/$(uname -m | sed -e 's/x86_64/amd64/' -e 's/aarch64/arm64/')"
      fi

      # Print version information
      go version
      echo "ko version $(/tmp/ko version)"

      # Allow directory to be owned by other user which is normal for a volume-mounted directory.
      # This allows Go to run git commands to access repository metadata.
      # Documentation: https://git-scm.com/docs/git-config/2.39.0\#Documentation/git-config.txt-safedirectory
      git config --global --add safe.directory "${PARAM_SOURCE_ROOT}"

      # Run ko

      export GOROOT="$(go env GOROOT)"

      pushd "${PARAM_SOURCE_CONTEXT}" > /dev/null
        /tmp/ko build "${PARAM_PACKAGE_DIRECTORY}" --oci-layout-path="${PARAM_OUTPUT_DIRECTORY}" --platform="${PLATFORM}" --push=false
      popd > /dev/null
    command:
    - /bin/bash
    env:
    - name: DOCKER_CONFIG
      value: /tekton/home/.docker
    - name: HOME
      value: /tekton/home
    - name: GOFLAGS
      value: $(params.go-flags)
    - name: GOCACHE
      value: /gocache
    - name: PARAM_OUTPUT_IMAGE
      value: $(params.shp-output-image)
    - name: PARAM_OUTPUT_DIRECTORY
      value: $(params.shp-output-directory)
    - name: PARAM_SOURCE_CONTEXT
      value: $(params.shp-source-context)
    - name: PARAM_SOURCE_ROOT
      value: $(params.shp-source-root)
    - name: PARAM_TARGET_PLATFORM
      value: $(params.target-platform)
    - name: PARAM_PACKAGE_DIRECTORY
      value: $(params.package-directory)
    - name: PARAM_KO_VERSION
      value: $(params.ko-version)
    image: golang:$(params.go-version)
    imagePullPolicy: Always
    name: build
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 65Mi
    volumeMounts:
    - mountPath: /gocache
      name: gocache
      readOnly: false
    workingDir: $(params.shp-source-root)
  volumes:
  - description: Volume to contain the GOCACHE. Can be set to a persistent volume
      to optimize compilation performance for rebuilds.
    emptyDir: {}
    name: gocache
    overridable: true
